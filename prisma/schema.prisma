// prisma/schema.prisma
// Healthcare Worker Clock-In/Out System Database Schema
// Following 2025 Prisma + Next.js best practices with complete beginner explanations

// 🔧 GENERATOR: Tells Prisma what client code to generate for your app
generator client {
  provider = "prisma-client-js"  // Creates TypeScript client with full type safety
}

// 🔌 DATASOURCE: Tells Prisma how to connect to your database
datasource db {
  provider  = "postgresql"           // We're using PostgreSQL (Supabase)
  url       = env("DATABASE_URL")    // Pooled connection for app operations
  directUrl = env("DIRECT_URL")      // Direct connection for migrations
}

// 🏥 ORGANIZATIONS MODEL
// This represents hospitals, clinics, or healthcare facilities where workers clock-in
model organizations {
  // 📋 PRIMARY KEY: Unique identifier for each organization
  id          String   @id @default(cuid())  // cuid() creates unique, URL-safe IDs
  
  // 🏢 ORGANIZATION DETAILS
  name        String   // Example: "City General Hospital", "Downtown Clinic"
  address     String?  // Physical address (? means optional)
  
  // 📍 LOCATION DATA: Used for GPS proximity validation
  latitude    Float?   // GPS coordinate for hospital location
  longitude   Float?   // GPS coordinate for hospital location  
  radius      Int      @default(100) // Allowed check-in radius in meters (default: 100m)
  
  // ⏰ TIMESTAMPS: Automatically managed by Prisma
  created_at  DateTime @default(now())  // When organization was added
  updated_at  DateTime @updatedAt       // Last time organization was modified

  // 🔗 RELATIONSHIPS: How this table connects to others
  users  users[]  // One organization can have many users (workers)
  shifts shifts[] // One organization can have many shifts recorded

  // 🎯 TABLE NAME MAPPING: Keep consistent with existing Supabase setup
  @@map("organizations") // Maps to existing "organizations" table in database
}

// 👥 USERS MODEL  
// This represents healthcare workers (nurses, doctors, technicians, managers, etc.)
model users {
  // 📋 PRIMARY KEY: Unique identifier for each user
  id              String   @id @default(cuid())
  
  // 👤 USER AUTHENTICATION & PROFILE
  email           String   @unique              // Email from Auth0 (must be unique)
  name            String?                       // Full name (optional)
  role            String   @default("worker")   // "worker", "manager", "admin"
  
  // 🏢 WORKPLACE CONNECTION
  organization_id String                        // Which hospital/facility they work at
  
  // 📊 ACCOUNT STATUS
  active          Boolean  @default(true)       // Whether account is active
  
  // ⏰ TIMESTAMPS
  created_at      DateTime @default(now())      // When user joined system
  updated_at      DateTime @updatedAt           // Last profile update

  // 🔗 RELATIONSHIPS: How this connects to other tables
  // Each user belongs to one organization, can have many shifts
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  shifts       shifts[]     // All shifts this user has worked

  // 🎯 TABLE NAME MAPPING
  @@map("users")
}

// ⏰ SHIFTS MODEL
// This represents individual work sessions from clock-in to clock-out
model shifts {
  // 📋 PRIMARY KEY: Unique identifier for each shift
  id                   String    @id @default(cuid())
  
  // 👤 WHO & WHERE: Links to user and their workplace
  user_id              String    // Which healthcare worker
  organization_id      String    // Which facility (hospital/clinic)
  
  // 🟢 CLOCK-IN DATA: When worker starts their shift
  clock_in_time        DateTime  // Exact timestamp when clocked in
  clock_in_latitude    Float     // GPS location where worker clocked in
  clock_in_longitude   Float     // GPS location where worker clocked in
  
  // 🔴 CLOCK-OUT DATA: When worker ends their shift (optional until they clock out)
  clock_out_time       DateTime? // Timestamp when clocked out (null = still working)
  clock_out_latitude   Float?    // GPS location where worker clocked out
  clock_out_longitude  Float?    // GPS location where worker clocked out
  
  // 📝 ADDITIONAL SHIFT DATA
  notes                String?   // Optional notes about the shift
  duration_minutes     Int?      // Total shift length (calculated on clock-out)
  
  // ⏰ RECORD TIMESTAMPS
  created_at          DateTime  @default(now()) // When shift record was created
  updated_at          DateTime  @updatedAt      // Last time shift was updated

  // 🔗 RELATIONSHIPS: How shifts connect to users and organizations
  user         users         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  organization organizations @relation(fields: [organization_id], references: [id], onDelete: Cascade)

  // 🎯 TABLE NAME MAPPING
  @@map("shifts")
  
  // 📈 DATABASE INDEXES: Make queries faster (2025 best practice)
  @@index([user_id])                    // Fast lookup of user's shifts
  @@index([organization_id])            // Fast lookup of organization's shifts  
  @@index([clock_in_time])              // Fast lookup by date/time
  @@index([user_id, clock_out_time])    // Fast lookup of active shifts
}
